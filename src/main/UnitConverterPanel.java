/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package main;

import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import javax.swing.ImageIcon;

public abstract class UnitConverterPanel extends javax.swing.JPanel {
    /*Main JPanel that serves as a base to all the child SystemPanel */
    public final DataSystemEncoding dataSystemEncoding;
    
    public UnitConverterPanel(DataSystemEncoding cs, String name) {
        initComponents();
        textArea.addKeyListener(new OnlyAllowKeyAdapter(cs));
        textArea.addKeyListener(new OnKeyDownInterpret(this));
        unitLabel.setText(name.toUpperCase());
        checkBoxUePrefix.setText("");
        checkBoxUePrefix.setVisible(cs.hasPrefix);
        prefixEntry.setText(cs.prefix);
        prefixEntry.addKeyListener(new OnKeyDownReformat(this));
        dataSystemEncoding = cs;
    }

    public abstract void interpretStringTo();
    public abstract void formatFromData();
    
    private class OnKeyDownInterpret extends KeyAdapter{
        
        UnitConverterPanel unitConverterPanel;
        public OnKeyDownInterpret(UnitConverterPanel unitConverterPanel){
            this.unitConverterPanel = unitConverterPanel;
        }
        
        @Override
        public void keyReleased(KeyEvent e) {
            //interpreting textArea contents to array of integers
            this.unitConverterPanel.interpretStringTo();
            
            System.out.println(this.unitConverterPanel.unitLabel.getText() +" changed values to:");
            for(int i: Main.form.converterPanel1.converterValues){
                System.out.print(i+" ");
            }
            System.out.println();
        }
        
    }
    
    private class OnKeyDownReformat extends KeyAdapter{
        
        UnitConverterPanel unitConverterPanel;
        public OnKeyDownReformat(UnitConverterPanel unitConverterPanel){
            this.unitConverterPanel = unitConverterPanel;
        }
        
        @Override
        public void keyReleased(KeyEvent e) {
            this.unitConverterPanel.formatFromData();
        }
    }
            
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        copyButton = new javax.swing.JButton();
        unitLabel = new javax.swing.JLabel();
        scrollPane = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        prefixPanel = new javax.swing.JPanel();
        checkBoxUePrefix = new javax.swing.JCheckBox();
        prefixEntry = new javax.swing.JTextField();

        setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        setFocusable(false);
        setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        setMaximumSize(new java.awt.Dimension(377, 88));
        setMinimumSize(new java.awt.Dimension(377, 88));
        setPreferredSize(new java.awt.Dimension(377, 88));

        copyButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        copyButton.setText("COPY");
        copyButton.setToolTipText("Copy text to clipboard");
        copyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyButtonActionPerformed(evt);
            }
        });

        unitLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        unitLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        unitLabel.setText("unitText");

        textArea.setColumns(1);
        textArea.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        textArea.setLineWrap(true);
        textArea.setRows(3);
        scrollPane.setViewportView(textArea);

        checkBoxUePrefix.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        checkBoxUePrefix.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkBoxUePrefixItemStateChanged(evt);
            }
        });

        prefixEntry.setBackground(new java.awt.Color(240, 240, 240));
        prefixEntry.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        prefixEntry.setText("prefix");
        prefixEntry.setToolTipText("");
        prefixEntry.setBorder(null);
        prefixEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prefixEntryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout prefixPanelLayout = new javax.swing.GroupLayout(prefixPanel);
        prefixPanel.setLayout(prefixPanelLayout);
        prefixPanelLayout.setHorizontalGroup(
            prefixPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(prefixPanelLayout.createSequentialGroup()
                .addComponent(checkBoxUePrefix)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(prefixEntry)
                .addGap(17, 17, 17))
        );
        prefixPanelLayout.setVerticalGroup(
            prefixPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(prefixPanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(prefixPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(checkBoxUePrefix, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(prefixEntry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(copyButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(unitLabel))
                    .addComponent(prefixPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(copyButton)
                            .addComponent(unitLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(prefixPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void checkBoxUePrefixItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkBoxUePrefixItemStateChanged
        this.formatFromData();
    }//GEN-LAST:event_checkBoxUePrefixItemStateChanged

    private void copyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyButtonActionPerformed
        StringSelection selection = new StringSelection(this.textArea.getText().replaceAll("[\n\t \r]+", " "));
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        clipboard.setContents(selection, selection);
    }//GEN-LAST:event_copyButtonActionPerformed

    private void prefixEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prefixEntryActionPerformed
        this.formatFromData();
    }//GEN-LAST:event_prefixEntryActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JCheckBox checkBoxUePrefix;
    private javax.swing.JButton copyButton;
    protected javax.swing.JTextField prefixEntry;
    private javax.swing.JPanel prefixPanel;
    protected javax.swing.JScrollPane scrollPane;
    protected javax.swing.JTextArea textArea;
    protected javax.swing.JLabel unitLabel;
    // End of variables declaration//GEN-END:variables
}
